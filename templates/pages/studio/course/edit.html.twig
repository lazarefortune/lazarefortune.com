{% extends 'layouts/studio/base.html.twig' %}

{% block title %}{{ entity.title }}{% endblock %}

{% block body %}

    <div class="dashboard-page-header">
        <nav class="breadcrumb" aria-label="Breadcrumb">
            <ol>
                <li>
                    <a href="{{ path('studio_home') }}">
                        <svg class="w-3 h-3 me-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                             fill="currentColor" viewBox="0 0 20 20">
                            <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"></path>
                        </svg>
                        Accueil
                    </a>
                </li>
                {{ icon('chevron-right') }}
                <li>
                    <a href="{{ path('studio_course_index') }}">Vidéos</a>
                </li>
                {{ icon('chevron-right') }}
                <li aria-current="page">
                    <span>Edition</span>
                </li>
            </ol>
        </nav>
    </div>

{#    <div class="mb-10">#}
{#        <input type="file" id="file-input" accept="video/*" />#}
{#        <button id="upload-btn" class="btn btn-sm btn-primary">Uploader</button>#}
{#        <div id="progress-container" style="display: none;">#}
{#            <progress id="upload-progress" value="0" max="100"></progress>#}
{#            <span id="progress-text">0%</span>#}
{#        </div>#}
{#    </div>#}

    <div class="mt-6">
        {% include 'pages/studio/course/_form.html.twig' with {
            form: form,
            button_label: 'Modifier',
            button_back_to_list: false
        } %}
    </div>


{#    <script type="text/javascript">#}
{#        console.log("Hello from the footer script!");#}
{#        async function initializeUpload(videoFile, accessToken) {#}
{#            const metadata = {#}
{#                snippet: {#}
{#                    title: "Titre de la vidéo",#}
{#                    description: "Description de la vidéo",#}
{#                    tags: ["tag1", "tag2"],#}
{#                    categoryId: 22 // Catégorie : People & Blogs#}
{#                },#}
{#                status: {#}
{#                    privacyStatus: "public" // ou 'private', 'unlisted'#}
{#                }#}
{#            };#}

{#            // Étape 1 : Initialiser l'upload résumable#}
{#            const response = await fetch("https://www.googleapis.com/upload/youtube/v3/videos?uploadType=resumable&part=snippet,status", {#}
{#                method: "POST",#}
{#                headers: {#}
{#                    Authorization: `Bearer ${accessToken}`,#}
{#                    "Content-Type": "application/json"#}
{#                },#}
{#                body: JSON.stringify(metadata)#}
{#            });#}

{#            if (response.ok) {#}
{#                return response.headers.get("location"); // URL d'upload résumable#}
{#            } else {#}
{#                throw new Error("Erreur lors de l'initialisation de l'upload.");#}
{#            }#}
{#        }#}

{#        async function uploadInChunks(videoFile, uploadUrl) {#}
{#            const chunkSize = 1024 * 1024 * 5; // Taille des chunks (5 MB)#}
{#            let uploadedBytes = 0;#}
{#            const totalBytes = videoFile.size;#}
{#            const progressBar = document.getElementById("upload-progress");#}
{#            const progressText = document.getElementById("progress-text");#}

{#            for (let start = 0; start < totalBytes; start += chunkSize) {#}
{#                const chunk = videoFile.slice(start, start + chunkSize);#}

{#                const response = await fetch(uploadUrl, {#}
{#                    method: "PUT",#}
{#                    headers: {#}
{#                        "Content-Length": chunk.size,#}
{#                        "Content-Range": `bytes ${start}-${start + chunk.size - 1}/${totalBytes}`#}
{#                    },#}
{#                    body: chunk#}
{#                });#}

{#                if (response.ok || response.status === 308) {#}
{#                    // Mise à jour de la progression#}
{#                    uploadedBytes += chunk.size;#}
{#                    const progress = Math.min((uploadedBytes / totalBytes) * 100, 100);#}
{#                    progressBar.value = progress;#}
{#                    progressText.textContent = `${Math.round(progress)}%`;#}
{#                } else {#}
{#                    throw new Error("Erreur lors de l'upload d'un chunk.");#}
{#                }#}
{#            }#}

{#            console.log("Upload terminé !");#}
{#        }#}

{#        document.getElementById("upload-btn").addEventListener("click", async () => {#}
{#            const fileInput = document.getElementById("file-input");#}
{#            const videoFile = fileInput.files[0];#}
{#            // const accessToken = "ya29.a0AeDClZCmksrPnUdGxkCm_zi9k0ZEIKwXcmE3wCkpB_o4rUCTwVgeuytVajIWmlUEcgT5rmonq8bBHRPwkqjRZAdvKs4gYLe9fqTXibLWdFlB52ZgYfTcvfdDKgmK7e1d3Z1k05DLpfoRWf6rym-FXnDkkwTqaapKe-ecSxuKtAaCgYKASISARMSFQHGX2MiVlJ3bePHKJRKhNLXDDi-IA0177"; // Récupéré via OAuth#}
{#            const accessToken = "ya29.a0AeDClZCSp2jIAIhoVJvOzCVgzazKIQXN19G1AKcwNto1UHz2o51weztCl7Q0YlTLoB93W5E9MfbxCyF9Nfis-BP1ywBBe5X92q9pg-6x3mREEI7df5VW2ZovfeLt_m49lRY5rKzzZsy-3F6wLBUc_MawxB50S_toECHmBCuuaCgYKAbkSARASFQHGX2Mi3Gyi-O8NkNGc2BHz1r1qJQ0175"; // Récupéré via OAuth#}

{#            if (!videoFile) {#}
{#                alert("Sélectionnez une vidéo avant de continuer !");#}
{#                return;#}
{#            }#}

{#            try {#}
{#                const progressContainer = document.getElementById("progress-container");#}
{#                progressContainer.style.display = "block";#}

{#                const uploadUrl = await initializeUpload(videoFile, accessToken);#}
{#                await uploadInChunks(videoFile, uploadUrl);#}
{#                alert("Vidéo uploadée avec succès !");#}
{#            } catch (error) {#}
{#                console.error("Erreur :", error.message);#}
{#                alert("Une erreur est survenue lors de l'upload.");#}
{#            }#}
{#        });#}

{#    </script>#}

{% endblock %}


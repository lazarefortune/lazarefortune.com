{{ form_start(form) }}
<section class="stack-large">

    {# =============================== #
       SECTION 1 : INFORMATIONS GÉNÉRALES
       =============================== #}
    <section class="stack">
        <div>
            <h1 class="h3">Informations générales</h1>
            <p class="text-sm text-muted mb-4">
                Renseignez les informations clés de votre cours. Le titre et l'auteur
                s'afficheront publiquement. Vous pouvez également planifier sa date de publication.
            </p>
        </div>

        <div class="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            {{ form_row(form.title, {
                label: 'Titre de la vidéo',
            }) }}

            {{ form_row(form.slug, {
                label: 'URL'
            }) }}

            {{ form_row(form.author, {
                label: 'Auteur',
            }) }}
            {{ form_row(form.image, {
                label: 'Image de couverture',
                row_attr: {
                    class: 'form-attachment',
                    style: 'grid-row-start:1; align-self:stretch;'
                },
            }) }}
            {{ form_row(form.publishedAt) }}
            {{ form_row(form.deprecatedBy, {
                label: 'Remplacé par',
            }) }}
        </div>

        <div class="grid2 mt-6">
            {{ form_row(form.mainTechnologies, {
                label: 'Tags principaux',
                help: 'Choisir les tags les plus importants.'
            }) }}
            {{ form_row(form.secondaryTechnologies, {
                label: 'Tags secondaires',
                help: 'Choisir des tags complémentaires.'
            }) }}
        </div>

        <div class="grid2 mt-6">
            <div>
                {{ form_row(form.online, { label: 'En ligne ?' }) }}
            </div>
            <div>
                {{ form_row(form.premium, { label: 'Est-ce un cours Premium ?' }) }}
            </div>
        </div>
    </section>

    <div class="divider"></div>

    {# ============================== #
   SECTION 2 : GESTION DE LA VIDÉO
   ============================== #}
    <section class="stack-large">
        <div>
            <h1 class="h3">Gestion de la vidéo</h1>
            <p class="text-sm text-muted">
                Vous pouvez soit fournir un ID YouTube existant, soit uploader la vidéo directement.
                La miniature peut être choisie à tout moment et sera synchronisée dès que l'ID sera disponible.
            </p>
        </div>

        {# Champ pour la miniature locale (toujours affiché) #}
        <div class="mb-6 max-w-md">
            {{ form_row(form.youtubeThumbnail, {
                label: "Miniature YouTube",
                row_attr: {
                    class: 'form-attachment'
                },
            }) }}
        </div>

        {# SI on a déjà un youtubeId => on affiche la gestion de la durée et le bouton de synchro #}
        {% if entity.youtubeId %}
            <div class="flex flex-col sm:flex-row gap-4 items-start">
                <div class="relative">
                    {{ form_row(form.duration, {
                        label: 'Durée (secondes)',
                        help: 'Cliquez pour actualiser la durée depuis YouTube.'
                    }) }}
                    <button
                            type="submit"
                            name="fetchVideoDuration"
                            value="1"
                            class="absolute top-9 right-2 mt-2 mr-2 text-slate-400 hover:text-primary-800 transition-colors duration-200"
                            title="Récupérer la durée depuis YouTube"
                    >
                        {{ icon('refresh-cw') }}
                    </button>
                </div>
                <div>
                    {{ form_row(form.youtubeId, {
                        label: 'YouTube ID',
                    }) }}
                </div>
            </div>

            {# SINON => on affiche deux blocs : "Fournir un ID" ou "Uploader" #}
        {% else %}
            <div class="flex flex-col md:flex-row gap-8">
                {# Bloc 1 : Saisir un ID YouTube #}
                <div class="flex-1 border border-slate-200 dark:border-slate-800 rounded-xl p-4 lg:p-6">
                    <h2 class="h4 mb-3">Option 1 : Vidéo déjà en ligne</h2>
                    <p class="text-sm text-muted mb-4">
                        Si la vidéo existe déjà sur YouTube, vous pouvez simplement renseigner
                        son identifiant (YouTube ID).
                    </p>
                    {{ form_row(form.youtubeId, {
                        label: 'ID YouTube existant',
                        attr: { placeholder: 'Ex: dQw4w9WgXcQ' }
                    }) }}
                </div>

                {# Bloc 2 : Upload direct / résumable #}
                <div class="flex-1 border border-slate-200 dark:border-slate-800 rounded-xl p-4 lg:p-6">
                    <h2 class="h4 mb-3">Option 2 : Uploader sur YouTube</h2>
                    <p class="text-sm text-muted mb-4">
                        Téléversez votre vidéo directement depuis ce formulaire
                        (Upload résumable).
                    </p>
                    <div id="drop-zone" class="course__upload-dropzone mb-3">
                        <div class="text-center" id="drop-text">
                            {{ icon('upload') }}
                            Glissez votre fichier vidéo ici ou cliquez pour sélectionner
                        </div>
                        <div id="file-name" class="text-center text-sm text-muted mt-2"></div>
                    </div>

                    <div class="flex items-center gap-4">
                        <button id="upload-btn" type="button" class="btn btn-primary">
                            <span id="upload-btn__icon" class="animate-spin hidden">{{ icon('loader') }}</span>
                            <span id="upload-btn__text">Téléverser</span>
                        </button>
                        <button id="remove-btn" type="button" class="btn btn-light">Annuler</button>
                    </div>

                    {# Input masqué pour la sélection de fichier #}
                    <input type="file" id="file-input" accept="video/*" style="display: none;" />

                    {# Barre de progression #}
                    <div id="progress-container" class="mt-4 w-full" style="display: none;">
                        <div class="relative w-full bg-gray-200 rounded-full h-4 overflow-hidden">
                            <div id="progress-bar" class="bg-blue-500 h-full" style="width: 0;"></div>
                        </div>
                        <span id="progress-text" class="ml-2 text-sm text-gray-700">0%</span>
                    </div>
                </div>
            </div>
        {% endif %}
    </section>


    {# ============================ #
       SECTION 3 : PIÈCE JOINTE
       ============================ #}
    {% if entity.id %}
        <div class="divider"></div>
        <section class="stack-large">
            <div>
                <h1 class="h3">Pièce jointe</h1>
                <p class="text-sm text-muted">
                    Vous pouvez ajouter un code source ou un document complémentaire.
                    Cochez l'option ci-dessous pour l’activer ou le désactiver.
                </p>
            </div>

            <div class="stack mb-8">
                <div>
                    {{ form_row(form.enableSource, {
                        label: 'Activer/ Désactiver le code source',
                    }) }}
                </div>
                <div class="grid2">
                    {{ form_row(form.sourceFile, {
                        disabled: not entity.id,
                        label: 'Fichier Code Source'
                    }) }}
                </div>
                <div>
                    {% if entity.source %}
                        <a
                                href="{{ vich_uploader_asset(entity, 'sourceFile') }}"
                                target="_blank"
                                download="{{ entity.source }}"
                                class="btn btn-sm btn-light"
                        >
                            Télécharger la source
                        </a>
                    {% endif %}
                </div>
            </div>
        </section>
    {% endif %}

    <div class="divider"></div>
    {# ============================= #
       SECTION 4 : DESCRIPTION
       ============================= #}
    <section class="stack-large">
        <div>
            <h1 class="h3">Description</h1>
            <p class="text-sm text-muted">
                Rédigez un contenu détaillé pour accompagner votre vidéo.
                Un contenu riche améliore le référencement et l'impact pédagogique.
            </p>
        </div>
        {{ form_row(form.content, { label: false }) }}
    </section>

    <div class="divider"></div>
    {# ============================= #
       SECTION 5 : BOUTONS DE SOUMISSION
       ============================= #}
    <div class="flex flex-col justify-start gap-3 md:flex-row-reverse">
        <button type="submit" class="btn btn-primary">
            {{ icon('save') }}
            Enregistrer
        </button>
        <button
                type="submit"
                name="synchronize"
                value="1"
                class="btn btn-outline"
        >
            {{ icon('refresh-cw') }} Enregistrer & Synchroniser
        </button>
        {% if entity.id and entity.isOnline %}
            <a href="{{ path('app_course_show', { slug: entity.slug }) }}"
               target="_blank"
               class="btn btn-light"
            >
                {{ icon('external-link') }}
                Voir en ligne
            </a>
        {% endif %}
        {% if entity.id %}
        <button data-modal-id="deleteCourse"
                type="button"
           class="btn btn-light-danger"
        >
            {{ icon('trash-2') }}
            Supprimer
        </button>
        <modal-dialog id="deleteCourse" hidden="hidden" overlay-close>
                <section class="modal-box max-w-lg w-full p-6 bg-white dark:bg-primary-950 rounded shadow-lg">
                    <div class="flex items-center justify-between mb-2">
                        <h2 class="text-xl font-semibold text-slate-800 dark:text-slate-100">
                            Supprimer la vidéo
                        </h2>
                        <button data-dismiss aria-label="Close" class="modal-close text-slate-500 hover:text-slate-700 dark:text-slate-400 dark:hover:text-slate-200">
                            {{ icon('x') }}
                        </button>
                    </div>

                    <hr class="my-4 border-slate-200 dark:border-slate-700"/>

                    <form class="mt-5" action="{{ path('studio_course_delete', { id: entity.id }) }}" method="post">
                        <input type="hidden" name="_method" value="DELETE">
                        <p class="text-slate-900 dark:text-white">Voulez-vous supprimer cette vidéo ?</p>
                        <p class="text-slate-900 dark:text-white">Cette action est irreversible</p>

                        <div class="flex justify-end gap-x-2 mt-6">
                            <button type="button" class="btn btn-light" data-dismiss>Annuler</button>
                            <button type="submit" class="btn btn-light-danger">
                                {{ icon('trash-2') }}
                                Supprimer
                            </button>
                        </div>
                    </form>
                </section>
            </modal-dialog>
        {% endif %}
    </div>
</section>
{{ form_end(form) }}

{% if not entity.youtubeId %}
    {# ============================= #
       SECTION 6 : UPLOAD RESUMABLE
       ============================= #}

    <script type="text/javascript">
    /* ========================
    CONFIG
    ======================== */
    const courseId = {{ entity.id|json_encode|raw }};
    const chunkSize = 5 * 1024 * 1024; // 5MB


    // ====== RÉFÉRENCES DOM ======
    const dropZone         = document.getElementById("drop-zone");
    const dropText         = document.getElementById("drop-text");
    const fileNameDisplay  = document.getElementById("file-name");
    const removeBtn        = document.getElementById("remove-btn");
    const fileInput        = document.getElementById("file-input");
    const uploadBtn        = document.getElementById("upload-btn");
    const uploadBtnText    = document.getElementById("upload-btn__text");
    const uploadBtnIcon    = document.getElementById("upload-btn__icon");
    const progressContainer= document.getElementById("progress-container");
    const progressBar      = document.getElementById("progress-bar");
    const progressText     = document.getElementById("progress-text");

    removeBtn.style.display = "none";
    // ================================
    // 1) GESTION DRAG & DROP
    // ================================
    // Empêche le navigateur de gérer lui-même le drop
    ["dragenter", "dragover", "dragleave", "drop"].forEach(eventName => {
        dropZone.addEventListener(eventName, e => e.preventDefault(), false);
    });

    // Ajout / retrait d'une classe pour le style "dragover"
    ["dragenter", "dragover"].forEach(eventName => {
        dropZone.addEventListener(eventName, () => {
            dropZone.classList.add("dragover");
        }, false);
    });
    ["dragleave", "drop"].forEach(eventName => {
        dropZone.addEventListener(eventName, () => {
            dropZone.classList.remove("dragover");
        }, false);
    });

    // Dépose du fichier => on met à jour l'input
    dropZone.addEventListener("drop", e => {
        const files = e.dataTransfer.files;
        if (files.length) {
            fileInput.files = files;
            dropText.style.display = "none";
            removeBtn.style.display = "inline-block";
            updateFileName(files[0].name);
        }
    });

    // Clique sur la zone => ouvre la fenêtre de sélection
    dropZone.addEventListener("click", () => {
        fileInput.click();
    });

    // Quand on sélectionne un fichier depuis l’explorateur
    fileInput.addEventListener("change", () => {
        if (fileInput.files.length > 0) {
            dropText.style.display = "none";
            removeBtn.style.display = "inline-block";
            updateFileName(fileInput.files[0].name);
        }
    });

    removeBtn.addEventListener("click", (e) => {
        e.preventDefault();

        // 1. Remet l’input à vide
        fileInput.value = "";

        // 2. Affiche le texte, efface le nom de fichier
        dropText.style.display = "block";
        fileNameDisplay.textContent = "";
    });

    function updateFileName(name) {
        fileNameDisplay.textContent = name;
    }

    // ================================
    // 2) LOGIQUE UPLOAD RÉSUMABLE
    // ================================

    function disableUploadButton() {
        uploadBtn.classList.remove('btn-primary')
        uploadBtn.classList.add('btn-disabled')
        uploadBtnIcon.classList.remove('hidden')
        uploadBtnText.innerHTML = "Patientez"
    }

    function enableUploadButton() {
        uploadBtn.classList.add('btn-primary')
        uploadBtn.classList.remove('btn-disabled')
        uploadBtnIcon.classList.add('hidden')
        uploadBtnText.innerHTML = "Téléverser"
    }

    uploadBtn.addEventListener("click", async (e) => {
        e.preventDefault();


        // Vérifie qu'on a bien un fichier
        if (!fileInput.files.length) {
            alert("Sélectionnez une vidéo avant de continuer !");
            return;
        }
        const videoFile = fileInput.files[0];

        try {
            disableUploadButton();
            // Étape 1 : Récupérer token + metadata
            const { accessToken, metadata } = await fetchMetadata(courseId);

            // Étape 2 : Initialiser l'upload résumable sur YouTube
            const uploadUrl = await initResumableUpload(videoFile, accessToken, metadata);

            // Étape 3 : Envoi des chunks
            const youtubeId = await uploadVideoInChunks(videoFile, uploadUrl);
            alert(`Upload terminé. YouTube ID: ${youtubeId}`);

            // Étape 4 : Enregistrer l’ID dans la BDD
            await saveYoutubeId(courseId, youtubeId);
            alert("ID YouTube enregistré en base. Redirection…");

            // (Facultatif) recharger la page pour afficher le nouveau youtubeId
            location.reload();

        } catch (err) {
            console.error(err);
            enableUploadButton()
            alert("Erreur: " + err.message);
        }
    }});

    // ----------- FONCTIONS EXISTANTES / UTILITAIRES -----------

    async function fetchMetadata(courseId) {
        const res = await fetch(`/studio/videos/youtube/metadata?courseId=${courseId}`);
        if (!res.ok) {
            const errMsg = await res.text();
            throw new Error(`${errMsg || "Erreur récupération metadata"}`);
        }
        return res.json(); // { accessToken, metadata }
    }

    async function initResumableUpload(videoFile, accessToken, metadata) {
        const url = "https://www.googleapis.com/upload/youtube/v3/videos?uploadType=resumable&part=snippet,status";

        const body = {
            snippet: {
                title: metadata.title,
                description: metadata.description,
                categoryId: 28, // Education, par exemple
            },
            status: {
                privacyStatus: metadata.privacy,
                // publishAt: metadata.publishedAt
            }
        };

        const res = await fetch(url, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${accessToken}`,
                "Content-Type": "application/json",
                "X-Upload-Content-Length": videoFile.size,
                "X-Upload-Content-Type": videoFile.type,
            },
            body: JSON.stringify(body)
        });

        if (!res.ok) {
            const errMsg = await res.text();
            throw new Error(`Erreur initResumable: ${errMsg}`);
        }

        const uploadUrl = res.headers.get("location");
        if (!uploadUrl) {
            throw new Error("Aucune URL d’upload résumable retournée par YouTube.");
        }
        return uploadUrl;
    }

    async function uploadVideoInChunks(videoFile, uploadUrl) {
        const totalBytes = videoFile.size;
        let uploadedBytes = 0;

        const progressContainer = document.getElementById("progress-container");
        const progressBar = document.getElementById("progress-bar");
        const progressText = document.getElementById("progress-text");
        progressContainer.style.display = "block";

        while (uploadedBytes < totalBytes) {
            const chunk = videoFile.slice(uploadedBytes, Math.min(uploadedBytes + chunkSize, totalBytes));
            const end = Math.min(uploadedBytes + chunk.size - 1, totalBytes - 1);

            const res = await fetch(uploadUrl, {
                method: "PUT",
                headers: {
                    "Content-Length": chunk.size,
                    "Content-Range": `bytes ${uploadedBytes}-${end}/${totalBytes}`
                },
                body: chunk
            });

            // Codes possibles: 308 => Resume Incomplete, 200 => Final chunk
            if (!res.ok && res.status !== 308) {
                throw new Error(`Erreur chunk upload: ${res.status} ${res.statusText}`);
            }

            uploadedBytes += chunk.size;
            const percent = Math.round((uploadedBytes / totalBytes) * 100);
            progressBar.style.width = `${percent}%`;
            progressText.textContent = `${percent}%`;

            // Dernier chunk => code 200
            if (res.status === 200) {
                const videoData = await res.json();
                return videoData.id; // on récupère l'ID YouTube
            }
        }

        throw new Error("Upload terminé mais pas de code 200 ?"); // en théorie impossible
    }

    async function saveYoutubeId(courseId, youtubeId) {
        const resp = await fetch("/studio/videos/youtube/save-youtube-id", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ courseId, youtubeId })
        });
        if (!resp.ok) {
            const errMsg = await resp.text();
            throw new Error(`Erreur sauvegarde ID: ${errMsg}`);
        }
        return resp.json(); // ou { success: true }
    }
</script>
{% endif %}

<!--
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const titleInput = document.querySelector("[id^='course_edit_form_title']"); // Champ titre
        const slugInput = document.querySelector("[id^='course_edit_form_slug']"); // Champ slug
        const editSlugBtn = document.getElementById("edit-slug-btn"); // Bouton Modifier
        const iconEdit = document.getElementById("slug-icon-edit"); // Icône modifier
        const iconLock = document.getElementById("slug-icon-lock"); // Icône verrouiller

        slugInput.classList.add("bg-zinc-100");
        slugInput.classList.add("text-slate-700");
        slugInput.classList.add("dark:bg-slate-800");
        slugInput.classList.add("dark:text-slate-400");

        if (!titleInput || !slugInput || !editSlugBtn || !iconEdit || !iconLock) {
            return;
        }

        let isSlugEditable = false;

        // Fonction pour générer un slug automatiquement
        function generateSlug(text) {
            return text.toLowerCase()
                .trim()
                .replace(/[àáâãäå]/g, "a")
                .replace(/[èéêë]/g, "e")
                .replace(/[ìíîï]/g, "i")
                .replace(/[òóôõö]/g, "o")
                .replace(/[ùúûü]/g, "u")
                .replace(/[ñ]/g, "n")
                .replace(/[^a-z0-9 -]/g, "") // Supprime les caractères spéciaux
                .replace(/\s+/g, "-") // Remplace les espaces par des tirets
                .replace(/-+/g, "-"); // Évite les doubles tirets
        }

        // Générer le slug en live si l'édition n'est pas activée
        titleInput.addEventListener("input", function () {
            if (!isSlugEditable) {
                slugInput.value = generateSlug(titleInput.value);
            }
        });

        // Activer/désactiver l'édition manuelle du slug
        editSlugBtn.addEventListener("click", function () {
            isSlugEditable = !isSlugEditable;
            slugInput.readOnly = !isSlugEditable;
            slugInput.classList.toggle("bg-zinc-100", !isSlugEditable);
            slugInput.classList.toggle("dark:bg-slate-800", !isSlugEditable);
            slugInput.classList.toggle("text-slate-700", !isSlugEditable);
            slugInput.classList.toggle("dark:text-slate-400", !isSlugEditable);

            // Basculer entre les icônes
            iconEdit.classList.toggle("hidden", isSlugEditable);
            iconLock.classList.toggle("hidden", !isSlugEditable);
        });
    });
</script>
-->
{{ form_start(form, {attr: {class: 'stacked'}}) }}

<section class="stack-large">

    <section class="stack">
        <h1 class="h3">
            Informations g√©n√©rales
        </h1>
        <div class="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            {{ form_row(form.title) }}
            {{ form_row(form.slug) }}
            {{ form_row(form.author) }}
            {{ form_row(form.publishedAt) }}
            {{ form_row(form.deprecatedBy, {label: 'D√©pr√©ci√© par'}) }}
            {{ form_row(form.image, {row_attr: {class: 'form-attachment', style:'grid-row-start:1; align-self:stretch;'}}) }}
        </div>
        <div class="w-full flex flex-col sm:flex-row gap-4 mt-4">
            {{ form_row(form.online, { label: 'En ligne ?' }) }}
            {{ form_row(form.source, { label: 'Code source ?' }) }}
            {{ form_row(form.premium, { label: 'Premium ?' }) }}
        </div>
        <div class="grid2">
            {{ form_row(form.mainTechnologies) }}
            {{ form_row(form.secondaryTechnologies) }}
        </div>
    </section>

    <section class="stack">
        <h1 class="h3">
            Gestion de la vid√©o
        </h1>
        <div class="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            {{ form_row(form.videoPath, {label: 'Video'}) }}
            <div class="relative">
                {{ form_row(form.youtube, { label: 'Youtube ID' }) }}
                {%if entity.id%}
                <button type="submit" name="uploadVideoDetails" value="1" class="absolute top-9 right-2 mt-2 mr-2 text-slate-400 hover:text-primary-800 transition-colors duration-200">
                    {{ icon('upload') }}
                </button>
                {% endif %}
            </div>
            <div class="relative">
                {{ form_row(form.duration, { label: 'Dur√©e (en secondes)' }) }}
                {%if entity.id%}
                <button type="submit" name="fetchVideoDuration" value="1" class="absolute top-9 right-2 mt-2 mr-2 text-slate-400 hover:text-primary-800 transition-colors duration-200">
                    {{ icon('refresh-cw') }}
                </button>
                {% endif %}
            </div>
            {{ form_row(form.youtubeThumbnail, {row_attr: {class: 'form-attachment', style:'grid-row-start:1; align-self:stretch;'}}) }}
        </div>
    </section>

    <section>

        <h1 class="h3 mb-4">
            Article
        </h1>

        <div class="grid3 mb-8">
            <div class="flex flex-col gap-2">
                {{ form_row(form.sourceFile, {disabled: not entity.id, label: 'Code Source'}) }}
                {% if entity.source %}
                    <a href="{{ vich_uploader_asset(entity, 'sourceFile') }}"
                       target="_blank"
                       download="{{ entity.source }}"
                       class="btn btn-sm btn-light">
                        T√©l√©charger la source {{ entity.source }}
                    </a>
                {% endif %}
            </div>
        </div>

        <div class="grid2">
            <div class="alert alert-info">üí° Conseil : R√©dig√© un article d√©taill√© pour accompagn√© votre vid√©o. Cela permettra d'augmenter son r√©f√©rencement et de mieux la comprendre.</div>
        </div>

        {{ form_row(form.content, {label: false}) }}
    </section>

    <section>
        <button type="submit" class="btn btn-primary">Enregistrer</button>
        {%if entity.id%}
            <a href="{{ path('app_course_show', {slug: entity.slug}) }}" target="_blank" class="btn btn-light ml-2">Voir en ligne</a>
        {% endif %}
    </section>

    <div class="mb-10">
        <input type="file" id="file-input" accept="video/*" />
        <button id="upload-btn" class="btn btn-sm btn-primary">Uploader</button>
        <div id="progress-container" style="display: none;">
            <progress id="upload-progress" value="0" max="100"></progress>
            <span id="progress-text">0%</span>
        </div>
    </div>

</section>


{#<script type="text/javascript">#}
{#    async function initializeUpload(videoFile, accessToken) {#}
{#        const metadata = {#}
{#            snippet: {#}
{#                title: "Titre de la vid√©o de TEST 2",#}
{#                description: "Description de la vid√©o TEST 2",#}
{#                tags: ["tag1", "tag2"],#}
{#                categoryId: 28 // 28 = Education#}
{#            },#}
{#            status: {#}
{#                privacyStatus: "public" // ou 'private', 'unlisted'#}
{#            }#}
{#        };#}

{#        try {#}
{#            const response = await fetch(#}
{#                "https://www.googleapis.com/upload/youtube/v3/videos?uploadType=resumable&part=snippet,status",#}
{#                {#}
{#                    method: "POST",#}
{#                    headers: {#}
{#                        Authorization: `Bearer ${accessToken}`,#}
{#                        "Content-Type": "application/json",#}
{#                        "X-Upload-Content-Length": videoFile.size,#}
{#                        "X-Upload-Content-Type": videoFile.type,#}
{#                    },#}
{#                    body: JSON.stringify(metadata),#}
{#                }#}
{#            );#}

{#            if (response.ok) {#}
{#                return response.headers.get("location"); // URL d'upload r√©sumable#}
{#            } else {#}
{#                throw new Error("Erreur lors de l'initialisation de l'upload.");#}
{#            }#}
{#        } catch (error) {#}
{#            console.error("Erreur :", error.message);#}
{#            throw error;#}
{#        }#}
{#    }#}

{#    async function uploadInChunks(videoFile, uploadUrl) {#}
{#        const chunkSize = 1024 * 1024 * 5; // 5MB#}
{#        let uploadedBytes = 0;#}
{#        const totalBytes = videoFile.size;#}
{#        const progressBar = document.getElementById("upload-progress");#}
{#        const progressText = document.getElementById("progress-text");#}

{#        while (uploadedBytes < totalBytes) {#}
{#            const chunk = videoFile.slice(uploadedBytes, uploadedBytes + chunkSize);#}
{#            const start = uploadedBytes;#}
{#            const end = Math.min(start + chunk.size - 1, totalBytes - 1);#}

{#            try {#}
{#                const response = await fetch(uploadUrl, {#}
{#                    method: "PUT",#}
{#                    headers: {#}
{#                        "Content-Length": chunk.size,#}
{#                        "Content-Range": `bytes ${start}-${end}/${totalBytes}`,#}
{#                    },#}
{#                    body: chunk,#}
{#                });#}

{#                if (response.ok || response.status === 308) {#}
{#                    uploadedBytes += chunk.size;#}
{#                    const progress = Math.min((uploadedBytes / totalBytes) * 100, 100);#}
{#                    progressBar.value = progress;#}
{#                    progressText.textContent = `${Math.round(progress)}%`;#}
{#                } else {#}
{#                    throw new Error("Erreur lors de l'upload d'un chunk.");#}
{#                }#}
{#            } catch (error) {#}
{#                console.error("Erreur :", error.message);#}
{#                throw error;#}
{#            }#}
{#        }#}

{#        console.log("Upload termin√© !");#}
{#    }#}

{#    document.getElementById("upload-btn").addEventListener("click", async (event) => {#}
{#        event.preventDefault();#}
{#        const fileInput = document.getElementById("file-input");#}
{#        const videoFile = fileInput.files[0];#}
{#        const accessToken = ""; // Remplacez par un token valide.#}

{#        if (!videoFile) {#}
{#            alert("S√©lectionnez une vid√©o avant de continuer !");#}
{#            return;#}
{#        }#}

{#        try {#}
{#            const progressContainer = document.getElementById("progress-container");#}
{#            progressContainer.style.display = "block";#}

{#            const uploadUrl = await initializeUpload(videoFile, accessToken);#}
{#            await uploadInChunks(videoFile, uploadUrl);#}
{#            alert("Vid√©o upload√©e avec succ√®s !");#}
{#        } catch (error) {#}
{#            console.error("Erreur :", error.message);#}
{#            alert("Une erreur est survenue lors de l'upload.");#}
{#        }#}
{#    });#}
{#</script>#}



<script type="text/javascript">
    const courseId = {{ entity.id|json_encode|raw }};
    console.log(courseId);

    async function getResumableUploadUrl(courseId) {
        const response = await fetch(`/wp-admin/videos/init-upload`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ courseId }),
        });

        if (!response.ok) {
            throw new Error("Erreur lors de la r√©cup√©ration de l'URL d'upload r√©sumable.");
        }

        const data = await response.json();
        return data.uploadUrl; // Retourne l'URL d'upload
    }

    async function uploadInChunks(videoFile, uploadUrl) {
        const chunkSize = 1024 * 1024 * 5; // Taille des chunks (5 MB)
        let uploadedBytes = 0;
        const totalBytes = videoFile.size;
        const progressBar = document.getElementById("upload-progress");
        const progressText = document.getElementById("progress-text");

        for (let start = 0; start < totalBytes; start += chunkSize) {
            const chunk = videoFile.slice(start, Math.min(start + chunkSize, totalBytes));

            try {
                const response = await fetch(uploadUrl, {
                    method: "PUT",
                    headers: {
                        "Content-Length": chunk.size,
                        "Content-Range": `bytes ${start}-${Math.min(start + chunk.size - 1, totalBytes - 1)}/${totalBytes}`,
                    },
                    body: chunk,
                });

                // G√©rer la progression
                if (response.ok || response.status === 308) {
                    uploadedBytes += chunk.size;
                    const progress = Math.min((uploadedBytes / totalBytes) * 100, 100);
                    progressBar.value = progress;
                    progressText.textContent = `${Math.round(progress)}%`;
                } else {
                    throw new Error(`Erreur lors de l'upload d'un chunk : ${response.statusText}`);
                }
            } catch (error) {
                console.error("Erreur lors de l'upload :", error.message);
                throw new Error("Erreur critique pendant l'upload.");
            }
        }

        console.log("Upload termin√© !");
    }

    async function finalizeVideoUpload(courseId, uploadUrl) {
        const response = await fetch('/wp-admin/videos/finalize-upload-backend', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ courseId, uploadUrl }),
        });

        if (response.ok) {
            const data = await response.json();
            console.log("Finalisation r√©ussie :", data);
            alert("Vid√©o finalis√©e avec succ√®s !");
        } else {
            throw new Error("Erreur lors de la finalisation de l'upload.");
        }
    }

    document.getElementById("upload-btn").addEventListener("click", async () => {
        event.preventDefault();
        const fileInput = document.getElementById("file-input");
        const videoFile = fileInput.files[0];

        if (!videoFile) {
            alert("S√©lectionnez une vid√©o avant de continuer !");
            return;
        }

        try {
            const progressContainer = document.getElementById("progress-container");
            progressContainer.style.display = "block";

            // √âtape 1 : Obtenir l'URL d'upload r√©sumable depuis le backend
            const uploadUrl = await getResumableUploadUrl(courseId);

            // √âtape 2 : Effectuer l'upload en chunks
            await uploadInChunks(videoFile, uploadUrl);

            // √âtape 3 : Finaliser l'upload c√¥t√© backend
            // await finalizeVideoUpload(courseId, uploadUrl);
        } catch (error) {
            console.error("Erreur :", error.message);
            alert("Une erreur est survenue lors de l'upload.");
        }
    });
</script>


{{ form_end(form) }}
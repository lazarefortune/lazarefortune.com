imports:
  - { resource: parameters.yaml }

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false
    bind:
      $videosPath: '%videos_path%'
      $adminPrefix: '%admin_prefix%'
      $publicPath: '%public_path%'

  Redis:
    lazy: true
    class: \Redis
    calls:
      - connect:
          - '%env(REDIS_HOST)%'
  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      exclude: '../src/{DependencyInjection,Entity,Infrastructure/Migrations,Tests,Kernel.php}'

  App\Http\Controller\:
    resource: '../src/Http/Controller'
    tags: [ 'controller.service_arguments' ]

  App\Http\Admin\Controller\:
    resource: '../src/Http/Admin/Controller'
    tags: [ 'controller.service_arguments' ]

  App\Http\Studio\Controller\:
    resource: '../src/Http/Studio/Controller'
    tags: [ 'controller.service_arguments' ]

  App\Http\Api\Controller\:
    resource: '../src/Http/Api/Controller'
    tags: [ 'controller.service_arguments' ]

  App\Helper\Paginator\PaginatorInterface:
    class: App\Helper\Paginator\KnpPaginator

  App\Helper\MinutesToTimeHelper: ~

  Knp\Bundle\PaginatorBundle\Helper\Processor: ~

  App\Infrastructure\Mailing\MailService:
    arguments:
      $senderEmail: '%app_email%'
      $senderName: '%app.name%'

  App\Domain\Contact\ContactService:
    arguments:
      $adminEmail: '%admin_email%'

  App\Domain\Collaboration\Subscriber\CollaborationRequestSubscriber:
    arguments:
      $adminEmail: '%admin_email%'

  App\Infrastructure\Spam\SpamService:
    arguments: [ [ 'App\Domain\Comment\Entity\Message' ] ]

  App\Http\Type\PriceType:
    arguments: [ '@App\Helper\CentToEuroTransformer' ]
    tags: [ 'form.type' ]

  App\Domain\Course\EventListener\CourseListener:
    tags:
      - { name: doctrine.event_listener, event: prePersist }
      - { name: doctrine.event_listener, event: preUpdate }

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  App\Infrastructure\AppConfigService:
    arguments:
      $appName: '%app.name%'

  App\Infrastructure\Image\ImageResizer:
    arguments: [ '%image_resize_key%' ]

  App\Http\Twig\TwigUrlExtension:
    arguments:
      $uploaderHelper: '@Vich\UploaderBundle\Templating\Helper\UploaderHelper'

  App\Domain\Application\EventListener\ExceptionListener:
    tags:
      - { name: kernel.event_listener, event: kernel.exception }

  App\Infrastructure\Payment\Stripe\StripeApi:
    arguments: [ '%stripe_secret_key%' ]

  App\Infrastructure\Payment\Stripe\StripeEventValueResolver:
    arguments: [ '%stripe_webhook_secret%' ]
    tags:
      - { name: controller.argument_value_resolver, priority: 50 }

  App\Infrastructure\Spam\GeoLocationService:
    arguments:
      $geoLiteDatabasePath: '%kernel.project_dir%/var/GeoLite2-Country.mmdb' # Chemin de la base de données

  App\Infrastructure\Spam\AccessControl\AccessControlListener:
    arguments:
      $env: '%kernel.environment%'
    tags:
      - {name: kernel.event_listener, event: kernel.request, priority: 10}

  _instanceof:
    App\Normalizer\Breadcrumb\BreadcrumbGeneratorInterface:
      tags: [ 'app.breadcrumb' ]

  App\Http\Twig\TwigBreadcrumbExtension:
    arguments: [ !tagged_iterator app.breadcrumb ]

  App\Infrastructure\Search\Meilisearch\MeilisearchClient:
    arguments: [ '%meilisearch_host%', '%meilisearch_key%' ]

  App\Infrastructure\Search\IndexerInterface:
    class: App\Infrastructure\Search\Meilisearch\MeilisearchIndexer

  App\Infrastructure\Search\SearchInterface:
    class: App\Infrastructure\Search\Meilisearch\MeilisearchSearch

  App\Infrastructure\Payment\PaymentTwigExtension:
    arguments: [ '%stripe_public_key%', '%paypal_id%' ]

  paypal_sandbox_environment:
    class: PayPalCheckoutSdk\Core\SandboxEnvironment
    arguments: [ "%paypal_id%", "%paypal_secret%" ]

  paypal_production_environment:
    class: PayPalCheckoutSdk\Core\ProductionEnvironment
    arguments: [ "%paypal_id%", "%paypal_secret%" ]

  PayPalCheckoutSdk\Core\PayPalHttpClient:
    arguments: [ "@paypal_sandbox_environment" ]

  App\Infrastructure\Queue\FailedJobsService:
    arguments: [ '@messenger.transport.failed' ]

  # Quiz Security Services
  App\Domain\Quiz\Service\QuizSessionManager: ~
  App\Domain\Quiz\Service\QuizValidationService: ~

# TODO: Si besoin d'utiliser le nom de l'application en BDD dans les templates, décommenter les lignes ci-dessous
#  App\Domain\Application\EventListener\ConfigListener:
#    tags:
#      - { name: 'kernel.event_listener', event: 'kernel.request', method: 'onKernelRequest' }
